// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Thu, 14 Jul 2022 13:47:27 BST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package ndigo

/*
#cgo linux LDFLAGS: -L/usr/local/lib -lndi
#cgo darwin LDFLAGS: -Wl,-rpath,/Library/NDI\ SDK\ for\ Apple/lib/macOS -L/Library/NDI\ SDK\ for\ Apple/lib/macOS -lndi
#cgo windows LDFLAGS: -L'C:\\Program Files\\NDI\NDI 5 Runtime\\v5' -lProcessing.NDI.Lib.x64
#include <stdlib.h>
#include "include/Processing.NDI.Lib.h"
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// Initialize function as declared in include/Processing.NDI.Lib.h:117
func Initialize() bool {
	__ret := C.NDIlib_initialize()
	__v := (bool)(__ret)
	return __v
}

// Destroy function as declared in include/Processing.NDI.Lib.h:120
func Destroy() {
	C.NDIlib_destroy()
}

// Version function as declared in include/Processing.NDI.Lib.h:123
func Version() string {
	__ret := C.NDIlib_version()
	__v := packPCharString(__ret)
	return __v
}

// IsSupportedCPU function as declared in include/Processing.NDI.Lib.h:127
func IsSupportedCPU() bool {
	__ret := C.NDIlib_is_supported_CPU()
	__v := (bool)(__ret)
	return __v
}

// FindCreateV2 function as declared in include/Processing.NDI.Find.h:61
func FindCreateV2(pCreateSettings *FindCreateType) FindInstanceType {
	cpCreateSettings, cpCreateSettingsAllocMap := pCreateSettings.PassRef()
	__ret := C.NDIlib_find_create_v2(cpCreateSettings)
	runtime.KeepAlive(cpCreateSettingsAllocMap)
	__v := *(*FindInstanceType)(unsafe.Pointer(&__ret))
	return __v
}

// FindDestroy function as declared in include/Processing.NDI.Find.h:65
func FindDestroy(pInstance FindInstanceType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_find_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	C.NDIlib_find_destroy(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// FindGetCurrentSources function as declared in include/Processing.NDI.Find.h:72
func FindGetCurrentSources(pInstance FindInstanceType, pNoSources *uint32) *SourceType {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_find_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpNoSources, cpNoSourcesAllocMap := (*C.uint32_t)(unsafe.Pointer(pNoSources)), cgoAllocsUnknown
	__ret := C.NDIlib_find_get_current_sources(cpInstance, cpNoSources)
	runtime.KeepAlive(cpNoSourcesAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := NewSourceTypeRef(unsafe.Pointer(__ret))
	return __v
}

// FindWaitForSources function as declared in include/Processing.NDI.Find.h:76
func FindWaitForSources(pInstance FindInstanceType, timeoutInMs uint32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_find_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	ctimeoutInMs, ctimeoutInMsAllocMap := (C.uint32_t)(timeoutInMs), cgoAllocsUnknown
	__ret := C.NDIlib_find_wait_for_sources(cpInstance, ctimeoutInMs)
	runtime.KeepAlive(ctimeoutInMsAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvCreateV3 function as declared in include/Processing.NDI.Recv.h:175
func RecvCreateV3(pCreateSettings *RecvCreateV3Type) RecvInstanceType {
	cpCreateSettings, cpCreateSettingsAllocMap := pCreateSettings.PassRef()
	__ret := C.NDIlib_recv_create_v3(cpCreateSettings)
	runtime.KeepAlive(cpCreateSettingsAllocMap)
	__v := *(*RecvInstanceType)(unsafe.Pointer(&__ret))
	return __v
}

// RecvDestroy function as declared in include/Processing.NDI.Recv.h:179
func RecvDestroy(pInstance RecvInstanceType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	C.NDIlib_recv_destroy(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// RecvConnect function as declared in include/Processing.NDI.Recv.h:184
func RecvConnect(pInstance RecvInstanceType, pSrc *SourceType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpSrc, cpSrcAllocMap := pSrc.PassRef()
	C.NDIlib_recv_connect(cpInstance, cpSrc)
	runtime.KeepAlive(cpSrcAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// RecvCaptureV2 function as declared in include/Processing.NDI.Recv.h:193
func RecvCaptureV2(pInstance RecvInstanceType, pVideoData *VideoFrameV2Type, pAudioData *AudioFrameV2Type, pMetadata *MetadataFrameType, timeoutInMs uint32) FrameType {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpVideoData, cpVideoDataAllocMap := pVideoData.PassRef()
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	cpMetadata, cpMetadataAllocMap := pMetadata.PassRef()
	ctimeoutInMs, ctimeoutInMsAllocMap := (C.uint32_t)(timeoutInMs), cgoAllocsUnknown
	__ret := C.NDIlib_recv_capture_v2(cpInstance, cpVideoData, cpAudioData, cpMetadata, ctimeoutInMs)
	runtime.KeepAlive(ctimeoutInMsAllocMap)
	runtime.KeepAlive(cpMetadataAllocMap)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpVideoDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (FrameType)(__ret)
	return __v
}

// RecvCaptureV3 function as declared in include/Processing.NDI.Recv.h:207
func RecvCaptureV3(pInstance RecvInstanceType, pVideoData *VideoFrameV2Type, pAudioData *AudioFrameV3Type, pMetadata *MetadataFrameType, timeoutInMs uint32) FrameType {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpVideoData, cpVideoDataAllocMap := pVideoData.PassRef()
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	cpMetadata, cpMetadataAllocMap := pMetadata.PassRef()
	ctimeoutInMs, ctimeoutInMsAllocMap := (C.uint32_t)(timeoutInMs), cgoAllocsUnknown
	__ret := C.NDIlib_recv_capture_v3(cpInstance, cpVideoData, cpAudioData, cpMetadata, ctimeoutInMs)
	runtime.KeepAlive(ctimeoutInMsAllocMap)
	runtime.KeepAlive(cpMetadataAllocMap)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpVideoDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (FrameType)(__ret)
	return __v
}

// RecvFreeVideoV2 function as declared in include/Processing.NDI.Recv.h:216
func RecvFreeVideoV2(pInstance RecvInstanceType, pVideoData *VideoFrameV2Type) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpVideoData, cpVideoDataAllocMap := pVideoData.PassRef()
	C.NDIlib_recv_free_video_v2(cpInstance, cpVideoData)
	runtime.KeepAlive(cpVideoDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// RecvFreeAudioV2 function as declared in include/Processing.NDI.Recv.h:220
func RecvFreeAudioV2(pInstance RecvInstanceType, pAudioData *AudioFrameV2Type) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	C.NDIlib_recv_free_audio_v2(cpInstance, cpAudioData)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// RecvFreeAudioV3 function as declared in include/Processing.NDI.Recv.h:224
func RecvFreeAudioV3(pInstance RecvInstanceType, pAudioData *AudioFrameV3Type) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	C.NDIlib_recv_free_audio_v3(cpInstance, cpAudioData)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// RecvFreeMetadata function as declared in include/Processing.NDI.Recv.h:228
func RecvFreeMetadata(pInstance RecvInstanceType, pMetadata *MetadataFrameType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpMetadata, cpMetadataAllocMap := pMetadata.PassRef()
	C.NDIlib_recv_free_metadata(cpInstance, cpMetadata)
	runtime.KeepAlive(cpMetadataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// RecvFreeString function as declared in include/Processing.NDI.Recv.h:233
func RecvFreeString(pInstance RecvInstanceType, pString string) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	pString = safeString(pString)
	cpString, cpStringAllocMap := unpackPCharString(pString)
	C.NDIlib_recv_free_string(cpInstance, cpString)
	runtime.KeepAlive(pString)
	runtime.KeepAlive(cpStringAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// RecvSendMetadata function as declared in include/Processing.NDI.Recv.h:238
func RecvSendMetadata(pInstance RecvInstanceType, pMetadata *MetadataFrameType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpMetadata, cpMetadataAllocMap := pMetadata.PassRef()
	__ret := C.NDIlib_recv_send_metadata(cpInstance, cpMetadata)
	runtime.KeepAlive(cpMetadataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvSetTally function as declared in include/Processing.NDI.Recv.h:243
func RecvSetTally(pInstance RecvInstanceType, pTally *TallyType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpTally, cpTallyAllocMap := pTally.PassRef()
	__ret := C.NDIlib_recv_set_tally(cpInstance, cpTally)
	runtime.KeepAlive(cpTallyAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvGetPerformance function as declared in include/Processing.NDI.Recv.h:250
func RecvGetPerformance(pInstance RecvInstanceType, pTotal *RecvPerformanceType, pDropped *RecvPerformanceType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpTotal, cpTotalAllocMap := pTotal.PassRef()
	cpDropped, cpDroppedAllocMap := pDropped.PassRef()
	C.NDIlib_recv_get_performance(cpInstance, cpTotal, cpDropped)
	runtime.KeepAlive(cpDroppedAllocMap)
	runtime.KeepAlive(cpTotalAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// RecvGetQueue function as declared in include/Processing.NDI.Recv.h:254
func RecvGetQueue(pInstance RecvInstanceType, pTotal *RecvQueueType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpTotal, cpTotalAllocMap := pTotal.PassRef()
	C.NDIlib_recv_get_queue(cpInstance, cpTotal)
	runtime.KeepAlive(cpTotalAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// RecvClearConnectionMetadata function as declared in include/Processing.NDI.Recv.h:260
func RecvClearConnectionMetadata(pInstance RecvInstanceType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	C.NDIlib_recv_clear_connection_metadata(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// RecvAddConnectionMetadata function as declared in include/Processing.NDI.Recv.h:265
func RecvAddConnectionMetadata(pInstance RecvInstanceType, pMetadata *MetadataFrameType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpMetadata, cpMetadataAllocMap := pMetadata.PassRef()
	C.NDIlib_recv_add_connection_metadata(cpInstance, cpMetadata)
	runtime.KeepAlive(cpMetadataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// RecvGetNoConnections function as declared in include/Processing.NDI.Recv.h:270
func RecvGetNoConnections(pInstance RecvInstanceType) int32 {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_get_no_connections(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (int32)(__ret)
	return __v
}

// RecvGetWebControl function as declared in include/Processing.NDI.Recv.h:279
func RecvGetWebControl(pInstance RecvInstanceType) string {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_get_web_control(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// RecvPtzIsSupported function as declared in include/Processing.NDI.Recv.ex.h:34
func RecvPtzIsSupported(pInstance RecvInstanceType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_is_supported(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvRecordingIsSupported function as declared in include/Processing.NDI.Recv.ex.h:49
func RecvRecordingIsSupported(pInstance RecvInstanceType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_recording_is_supported(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzZoom function as declared in include/Processing.NDI.Recv.ex.h:55
func RecvPtzZoom(pInstance RecvInstanceType, zoomValue float32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	czoomValue, czoomValueAllocMap := (C.float)(zoomValue), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_zoom(cpInstance, czoomValue)
	runtime.KeepAlive(czoomValueAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzZoomSpeed function as declared in include/Processing.NDI.Recv.ex.h:60
func RecvPtzZoomSpeed(pInstance RecvInstanceType, zoomSpeed float32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	czoomSpeed, czoomSpeedAllocMap := (C.float)(zoomSpeed), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_zoom_speed(cpInstance, czoomSpeed)
	runtime.KeepAlive(czoomSpeedAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzPanTilt function as declared in include/Processing.NDI.Recv.ex.h:66
func RecvPtzPanTilt(pInstance RecvInstanceType, panValue float32, tiltValue float32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpanValue, cpanValueAllocMap := (C.float)(panValue), cgoAllocsUnknown
	ctiltValue, ctiltValueAllocMap := (C.float)(tiltValue), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_pan_tilt(cpInstance, cpanValue, ctiltValue)
	runtime.KeepAlive(ctiltValueAllocMap)
	runtime.KeepAlive(cpanValueAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzPanTiltSpeed function as declared in include/Processing.NDI.Recv.ex.h:72
func RecvPtzPanTiltSpeed(pInstance RecvInstanceType, panSpeed float32, tiltSpeed float32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpanSpeed, cpanSpeedAllocMap := (C.float)(panSpeed), cgoAllocsUnknown
	ctiltSpeed, ctiltSpeedAllocMap := (C.float)(tiltSpeed), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_pan_tilt_speed(cpInstance, cpanSpeed, ctiltSpeed)
	runtime.KeepAlive(ctiltSpeedAllocMap)
	runtime.KeepAlive(cpanSpeedAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzStorePreset function as declared in include/Processing.NDI.Recv.ex.h:77
func RecvPtzStorePreset(pInstance RecvInstanceType, presetNo int32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpresetNo, cpresetNoAllocMap := (C.int)(presetNo), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_store_preset(cpInstance, cpresetNo)
	runtime.KeepAlive(cpresetNoAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzRecallPreset function as declared in include/Processing.NDI.Recv.ex.h:83
func RecvPtzRecallPreset(pInstance RecvInstanceType, presetNo int32, speed float32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpresetNo, cpresetNoAllocMap := (C.int)(presetNo), cgoAllocsUnknown
	cspeed, cspeedAllocMap := (C.float)(speed), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_recall_preset(cpInstance, cpresetNo, cspeed)
	runtime.KeepAlive(cspeedAllocMap)
	runtime.KeepAlive(cpresetNoAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzAutoFocus function as declared in include/Processing.NDI.Recv.ex.h:87
func RecvPtzAutoFocus(pInstance RecvInstanceType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_auto_focus(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzFocus function as declared in include/Processing.NDI.Recv.ex.h:92
func RecvPtzFocus(pInstance RecvInstanceType, focusValue float32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cfocusValue, cfocusValueAllocMap := (C.float)(focusValue), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_focus(cpInstance, cfocusValue)
	runtime.KeepAlive(cfocusValueAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzFocusSpeed function as declared in include/Processing.NDI.Recv.ex.h:97
func RecvPtzFocusSpeed(pInstance RecvInstanceType, focusSpeed float32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cfocusSpeed, cfocusSpeedAllocMap := (C.float)(focusSpeed), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_focus_speed(cpInstance, cfocusSpeed)
	runtime.KeepAlive(cfocusSpeedAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzWhiteBalanceAuto function as declared in include/Processing.NDI.Recv.ex.h:101
func RecvPtzWhiteBalanceAuto(pInstance RecvInstanceType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_white_balance_auto(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzWhiteBalanceIndoor function as declared in include/Processing.NDI.Recv.ex.h:105
func RecvPtzWhiteBalanceIndoor(pInstance RecvInstanceType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_white_balance_indoor(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzWhiteBalanceOutdoor function as declared in include/Processing.NDI.Recv.ex.h:109
func RecvPtzWhiteBalanceOutdoor(pInstance RecvInstanceType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_white_balance_outdoor(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzWhiteBalanceOneshot function as declared in include/Processing.NDI.Recv.ex.h:113
func RecvPtzWhiteBalanceOneshot(pInstance RecvInstanceType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_white_balance_oneshot(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzWhiteBalanceManual function as declared in include/Processing.NDI.Recv.ex.h:119
func RecvPtzWhiteBalanceManual(pInstance RecvInstanceType, red float32, blue float32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cred, credAllocMap := (C.float)(red), cgoAllocsUnknown
	cblue, cblueAllocMap := (C.float)(blue), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_white_balance_manual(cpInstance, cred, cblue)
	runtime.KeepAlive(cblueAllocMap)
	runtime.KeepAlive(credAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzExposureAuto function as declared in include/Processing.NDI.Recv.ex.h:123
func RecvPtzExposureAuto(pInstance RecvInstanceType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_exposure_auto(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzExposureManual function as declared in include/Processing.NDI.Recv.ex.h:128
func RecvPtzExposureManual(pInstance RecvInstanceType, exposureLevel float32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cexposureLevel, cexposureLevelAllocMap := (C.float)(exposureLevel), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_exposure_manual(cpInstance, cexposureLevel)
	runtime.KeepAlive(cexposureLevelAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvPtzExposureManualV2 function as declared in include/Processing.NDI.Recv.ex.h:135
func RecvPtzExposureManualV2(pInstance RecvInstanceType, iris float32, gain float32, shutterSpeed float32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	ciris, cirisAllocMap := (C.float)(iris), cgoAllocsUnknown
	cgain, cgainAllocMap := (C.float)(gain), cgoAllocsUnknown
	cshutterSpeed, cshutterSpeedAllocMap := (C.float)(shutterSpeed), cgoAllocsUnknown
	__ret := C.NDIlib_recv_ptz_exposure_manual_v2(cpInstance, ciris, cgain, cshutterSpeed)
	runtime.KeepAlive(cshutterSpeedAllocMap)
	runtime.KeepAlive(cgainAllocMap)
	runtime.KeepAlive(cirisAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvRecordingStart function as declared in include/Processing.NDI.Recv.ex.h:146
func RecvRecordingStart(pInstance RecvInstanceType, pFilenameHint string) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	pFilenameHint = safeString(pFilenameHint)
	cpFilenameHint, cpFilenameHintAllocMap := unpackPCharString(pFilenameHint)
	__ret := C.NDIlib_recv_recording_start(cpInstance, cpFilenameHint)
	runtime.KeepAlive(pFilenameHint)
	runtime.KeepAlive(cpFilenameHintAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvRecordingStop function as declared in include/Processing.NDI.Recv.ex.h:152
func RecvRecordingStop(pInstance RecvInstanceType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_recording_stop(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvRecordingSetAudioLevel function as declared in include/Processing.NDI.Recv.ex.h:161
func RecvRecordingSetAudioLevel(pInstance RecvInstanceType, levelDB float32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	clevelDB, clevelDBAllocMap := (C.float)(levelDB), cgoAllocsUnknown
	__ret := C.NDIlib_recv_recording_set_audio_level(cpInstance, clevelDB)
	runtime.KeepAlive(clevelDBAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvRecordingIsRecording function as declared in include/Processing.NDI.Recv.ex.h:169
func RecvRecordingIsRecording(pInstance RecvInstanceType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_recording_is_recording(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RecvRecordingGetFilename function as declared in include/Processing.NDI.Recv.ex.h:178
func RecvRecordingGetFilename(pInstance RecvInstanceType) string {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_recording_get_filename(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// RecvRecordingGetError function as declared in include/Processing.NDI.Recv.ex.h:186
func RecvRecordingGetError(pInstance RecvInstanceType) string {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_recv_recording_get_error(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// RecvRecordingGetTimes function as declared in include/Processing.NDI.Recv.ex.h:208
func RecvRecordingGetTimes(pInstance RecvInstanceType, pTimes *RecvRecordingTimeType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpTimes, cpTimesAllocMap := pTimes.PassRef()
	__ret := C.NDIlib_recv_recording_get_times(cpInstance, cpTimes)
	runtime.KeepAlive(cpTimesAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// SendCreate function as declared in include/Processing.NDI.Send.h:59
func SendCreate(pCreateSettings *SendCreateType) SendInstanceType {
	cpCreateSettings, cpCreateSettingsAllocMap := pCreateSettings.PassRef()
	__ret := C.NDIlib_send_create(cpCreateSettings)
	runtime.KeepAlive(cpCreateSettingsAllocMap)
	__v := *(*SendInstanceType)(unsafe.Pointer(&__ret))
	return __v
}

// SendDestroy function as declared in include/Processing.NDI.Send.h:63
func SendDestroy(pInstance SendInstanceType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	C.NDIlib_send_destroy(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// SendSendVideoV2 function as declared in include/Processing.NDI.Send.h:67
func SendSendVideoV2(pInstance SendInstanceType, pVideoData *VideoFrameV2Type) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpVideoData, cpVideoDataAllocMap := pVideoData.PassRef()
	C.NDIlib_send_send_video_v2(cpInstance, cpVideoData)
	runtime.KeepAlive(cpVideoDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// SendSendVideoAsyncV2 function as declared in include/Processing.NDI.Send.h:84
func SendSendVideoAsyncV2(pInstance SendInstanceType, pVideoData *VideoFrameV2Type) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpVideoData, cpVideoDataAllocMap := pVideoData.PassRef()
	C.NDIlib_send_send_video_async_v2(cpInstance, cpVideoData)
	runtime.KeepAlive(cpVideoDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// SendSendAudioV2 function as declared in include/Processing.NDI.Send.h:88
func SendSendAudioV2(pInstance SendInstanceType, pAudioData *AudioFrameV2Type) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	C.NDIlib_send_send_audio_v2(cpInstance, cpAudioData)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// SendSendAudioV3 function as declared in include/Processing.NDI.Send.h:92
func SendSendAudioV3(pInstance SendInstanceType, pAudioData *AudioFrameV3Type) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	C.NDIlib_send_send_audio_v3(cpInstance, cpAudioData)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// SendSendMetadata function as declared in include/Processing.NDI.Send.h:96
func SendSendMetadata(pInstance SendInstanceType, pMetadata *MetadataFrameType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpMetadata, cpMetadataAllocMap := pMetadata.PassRef()
	C.NDIlib_send_send_metadata(cpInstance, cpMetadata)
	runtime.KeepAlive(cpMetadataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// SendCapture function as declared in include/Processing.NDI.Send.h:100
func SendCapture(pInstance SendInstanceType, pMetadata *MetadataFrameType, timeoutInMs uint32) FrameType {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpMetadata, cpMetadataAllocMap := pMetadata.PassRef()
	ctimeoutInMs, ctimeoutInMsAllocMap := (C.uint32_t)(timeoutInMs), cgoAllocsUnknown
	__ret := C.NDIlib_send_capture(cpInstance, cpMetadata, ctimeoutInMs)
	runtime.KeepAlive(ctimeoutInMsAllocMap)
	runtime.KeepAlive(cpMetadataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (FrameType)(__ret)
	return __v
}

// SendFreeMetadata function as declared in include/Processing.NDI.Send.h:107
func SendFreeMetadata(pInstance SendInstanceType, pMetadata *MetadataFrameType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpMetadata, cpMetadataAllocMap := pMetadata.PassRef()
	C.NDIlib_send_free_metadata(cpInstance, cpMetadata)
	runtime.KeepAlive(cpMetadataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// SendGetTally function as declared in include/Processing.NDI.Send.h:113
func SendGetTally(pInstance SendInstanceType, pTally *TallyType, timeoutInMs uint32) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpTally, cpTallyAllocMap := pTally.PassRef()
	ctimeoutInMs, ctimeoutInMsAllocMap := (C.uint32_t)(timeoutInMs), cgoAllocsUnknown
	__ret := C.NDIlib_send_get_tally(cpInstance, cpTally, ctimeoutInMs)
	runtime.KeepAlive(ctimeoutInMsAllocMap)
	runtime.KeepAlive(cpTallyAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// SendGetNoConnections function as declared in include/Processing.NDI.Send.h:120
func SendGetNoConnections(pInstance SendInstanceType, timeoutInMs uint32) int32 {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	ctimeoutInMs, ctimeoutInMsAllocMap := (C.uint32_t)(timeoutInMs), cgoAllocsUnknown
	__ret := C.NDIlib_send_get_no_connections(cpInstance, ctimeoutInMs)
	runtime.KeepAlive(ctimeoutInMsAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (int32)(__ret)
	return __v
}

// SendClearConnectionMetadata function as declared in include/Processing.NDI.Send.h:126
func SendClearConnectionMetadata(pInstance SendInstanceType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	C.NDIlib_send_clear_connection_metadata(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// SendAddConnectionMetadata function as declared in include/Processing.NDI.Send.h:131
func SendAddConnectionMetadata(pInstance SendInstanceType, pMetadata *MetadataFrameType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpMetadata, cpMetadataAllocMap := pMetadata.PassRef()
	C.NDIlib_send_add_connection_metadata(cpInstance, cpMetadata)
	runtime.KeepAlive(cpMetadataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// SendSetFailover function as declared in include/Processing.NDI.Send.h:137
func SendSetFailover(pInstance SendInstanceType, pFailoverSource *SourceType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpFailoverSource, cpFailoverSourceAllocMap := pFailoverSource.PassRef()
	C.NDIlib_send_set_failover(cpInstance, cpFailoverSource)
	runtime.KeepAlive(cpFailoverSourceAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// SendGetSourceName function as declared in include/Processing.NDI.Send.h:141
func SendGetSourceName(pInstance SendInstanceType) *SourceType {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_send_get_source_name(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := NewSourceTypeRef(unsafe.Pointer(__ret))
	return __v
}

// RoutingCreate function as declared in include/Processing.NDI.Routing.h:51
func RoutingCreate(pCreateSettings *RoutingCreateType) RoutingInstanceType {
	cpCreateSettings, cpCreateSettingsAllocMap := pCreateSettings.PassRef()
	__ret := C.NDIlib_routing_create(cpCreateSettings)
	runtime.KeepAlive(cpCreateSettingsAllocMap)
	__v := *(*RoutingInstanceType)(unsafe.Pointer(&__ret))
	return __v
}

// RoutingDestroy function as declared in include/Processing.NDI.Routing.h:55
func RoutingDestroy(pInstance RoutingInstanceType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_routing_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	C.NDIlib_routing_destroy(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// RoutingChange function as declared in include/Processing.NDI.Routing.h:59
func RoutingChange(pInstance RoutingInstanceType, pSource *SourceType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_routing_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpSource, cpSourceAllocMap := pSource.PassRef()
	__ret := C.NDIlib_routing_change(cpInstance, cpSource)
	runtime.KeepAlive(cpSourceAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RoutingClear function as declared in include/Processing.NDI.Routing.h:63
func RoutingClear(pInstance RoutingInstanceType) bool {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_routing_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_routing_clear(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (bool)(__ret)
	return __v
}

// RoutingGetNoConnections function as declared in include/Processing.NDI.Routing.h:70
func RoutingGetNoConnections(pInstance RoutingInstanceType, timeoutInMs uint32) int32 {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_routing_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	ctimeoutInMs, ctimeoutInMsAllocMap := (C.uint32_t)(timeoutInMs), cgoAllocsUnknown
	__ret := C.NDIlib_routing_get_no_connections(cpInstance, ctimeoutInMs)
	runtime.KeepAlive(ctimeoutInMsAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (int32)(__ret)
	return __v
}

// RoutingGetSourceName function as declared in include/Processing.NDI.Routing.h:75
func RoutingGetSourceName(pInstance RoutingInstanceType) *SourceType {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_routing_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_routing_get_source_name(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := NewSourceTypeRef(unsafe.Pointer(__ret))
	return __v
}

// UtilSendSendAudioInterleaved16s function as declared in include/Processing.NDI.utilities.h:129
func UtilSendSendAudioInterleaved16s(pInstance SendInstanceType, pAudioData *AudioFrameInterleaved16sType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	C.NDIlib_util_send_send_audio_interleaved_16s(cpInstance, cpAudioData)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// UtilSendSendAudioInterleaved32s function as declared in include/Processing.NDI.utilities.h:133
func UtilSendSendAudioInterleaved32s(pInstance SendInstanceType, pAudioData *AudioFrameInterleaved32sType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	C.NDIlib_util_send_send_audio_interleaved_32s(cpInstance, cpAudioData)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// UtilSendSendAudioInterleaved32f function as declared in include/Processing.NDI.utilities.h:137
func UtilSendSendAudioInterleaved32f(pInstance SendInstanceType, pAudioData *AudioFrameInterleaved32fType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	C.NDIlib_util_send_send_audio_interleaved_32f(cpInstance, cpAudioData)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// UtilAudioToInterleaved16sV2 function as declared in include/Processing.NDI.utilities.h:141
func UtilAudioToInterleaved16sV2(pSrc *AudioFrameV2Type, pDst *AudioFrameInterleaved16sType) {
	cpSrc, cpSrcAllocMap := pSrc.PassRef()
	cpDst, cpDstAllocMap := pDst.PassRef()
	C.NDIlib_util_audio_to_interleaved_16s_v2(cpSrc, cpDst)
	runtime.KeepAlive(cpDstAllocMap)
	runtime.KeepAlive(cpSrcAllocMap)
}

// UtilAudioFromInterleaved16sV2 function as declared in include/Processing.NDI.utilities.h:145
func UtilAudioFromInterleaved16sV2(pSrc *AudioFrameInterleaved16sType, pDst *AudioFrameV2Type) {
	cpSrc, cpSrcAllocMap := pSrc.PassRef()
	cpDst, cpDstAllocMap := pDst.PassRef()
	C.NDIlib_util_audio_from_interleaved_16s_v2(cpSrc, cpDst)
	runtime.KeepAlive(cpDstAllocMap)
	runtime.KeepAlive(cpSrcAllocMap)
}

// UtilAudioToInterleaved32sV2 function as declared in include/Processing.NDI.utilities.h:149
func UtilAudioToInterleaved32sV2(pSrc *AudioFrameV2Type, pDst *AudioFrameInterleaved32sType) {
	cpSrc, cpSrcAllocMap := pSrc.PassRef()
	cpDst, cpDstAllocMap := pDst.PassRef()
	C.NDIlib_util_audio_to_interleaved_32s_v2(cpSrc, cpDst)
	runtime.KeepAlive(cpDstAllocMap)
	runtime.KeepAlive(cpSrcAllocMap)
}

// UtilAudioFromInterleaved32sV2 function as declared in include/Processing.NDI.utilities.h:153
func UtilAudioFromInterleaved32sV2(pSrc *AudioFrameInterleaved32sType, pDst *AudioFrameV2Type) {
	cpSrc, cpSrcAllocMap := pSrc.PassRef()
	cpDst, cpDstAllocMap := pDst.PassRef()
	C.NDIlib_util_audio_from_interleaved_32s_v2(cpSrc, cpDst)
	runtime.KeepAlive(cpDstAllocMap)
	runtime.KeepAlive(cpSrcAllocMap)
}

// UtilAudioToInterleaved32fV2 function as declared in include/Processing.NDI.utilities.h:157
func UtilAudioToInterleaved32fV2(pSrc *AudioFrameV2Type, pDst *AudioFrameInterleaved32fType) {
	cpSrc, cpSrcAllocMap := pSrc.PassRef()
	cpDst, cpDstAllocMap := pDst.PassRef()
	C.NDIlib_util_audio_to_interleaved_32f_v2(cpSrc, cpDst)
	runtime.KeepAlive(cpDstAllocMap)
	runtime.KeepAlive(cpSrcAllocMap)
}

// UtilAudioFromInterleaved32fV2 function as declared in include/Processing.NDI.utilities.h:161
func UtilAudioFromInterleaved32fV2(pSrc *AudioFrameInterleaved32fType, pDst *AudioFrameV2Type) {
	cpSrc, cpSrcAllocMap := pSrc.PassRef()
	cpDst, cpDstAllocMap := pDst.PassRef()
	C.NDIlib_util_audio_from_interleaved_32f_v2(cpSrc, cpDst)
	runtime.KeepAlive(cpDstAllocMap)
	runtime.KeepAlive(cpSrcAllocMap)
}

// UtilV210ToP216 function as declared in include/Processing.NDI.utilities.h:167
func UtilV210ToP216(pSrcV210 *VideoFrameV2Type, pDstP216 *VideoFrameV2Type) {
	cpSrcV210, cpSrcV210AllocMap := pSrcV210.PassRef()
	cpDstP216, cpDstP216AllocMap := pDstP216.PassRef()
	C.NDIlib_util_V210_to_P216(cpSrcV210, cpDstP216)
	runtime.KeepAlive(cpDstP216AllocMap)
	runtime.KeepAlive(cpSrcV210AllocMap)
}

// UtilP216ToV210 function as declared in include/Processing.NDI.utilities.h:172
func UtilP216ToV210(pSrcP216 *VideoFrameV2Type, pDstV210 *VideoFrameV2Type) {
	cpSrcP216, cpSrcP216AllocMap := pSrcP216.PassRef()
	cpDstV210, cpDstV210AllocMap := pDstV210.PassRef()
	C.NDIlib_util_P216_to_V210(cpSrcP216, cpDstV210)
	runtime.KeepAlive(cpDstV210AllocMap)
	runtime.KeepAlive(cpSrcP216AllocMap)
}

// FindCreate2 function as declared in include/Processing.NDI.deprecated.h:97
func FindCreate2(pCreateSettings *FindCreateType) FindInstanceType {
	cpCreateSettings, cpCreateSettingsAllocMap := pCreateSettings.PassRef()
	__ret := C.NDIlib_find_create2(cpCreateSettings)
	runtime.KeepAlive(cpCreateSettingsAllocMap)
	__v := *(*FindInstanceType)(unsafe.Pointer(&__ret))
	return __v
}

// FindCreate function as declared in include/Processing.NDI.deprecated.h:100
func FindCreate(pCreateSettings *FindCreateType) FindInstanceType {
	cpCreateSettings, cpCreateSettingsAllocMap := pCreateSettings.PassRef()
	__ret := C.NDIlib_find_create(cpCreateSettings)
	runtime.KeepAlive(cpCreateSettingsAllocMap)
	__v := *(*FindInstanceType)(unsafe.Pointer(&__ret))
	return __v
}

// FindGetSources function as declared in include/Processing.NDI.deprecated.h:107
func FindGetSources(pInstance FindInstanceType, pNoSources *uint32, timeoutInMs uint32) *SourceType {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_find_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpNoSources, cpNoSourcesAllocMap := (*C.uint32_t)(unsafe.Pointer(pNoSources)), cgoAllocsUnknown
	ctimeoutInMs, ctimeoutInMsAllocMap := (C.uint32_t)(timeoutInMs), cgoAllocsUnknown
	__ret := C.NDIlib_find_get_sources(cpInstance, cpNoSources, ctimeoutInMs)
	runtime.KeepAlive(ctimeoutInMsAllocMap)
	runtime.KeepAlive(cpNoSourcesAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := NewSourceTypeRef(unsafe.Pointer(__ret))
	return __v
}

// RecvCreateV2 function as declared in include/Processing.NDI.deprecated.h:140
func RecvCreateV2(pCreateSettings *RecvCreateType) RecvInstanceType {
	cpCreateSettings, cpCreateSettingsAllocMap := pCreateSettings.PassRef()
	__ret := C.NDIlib_recv_create_v2(cpCreateSettings)
	runtime.KeepAlive(cpCreateSettingsAllocMap)
	__v := *(*RecvInstanceType)(unsafe.Pointer(&__ret))
	return __v
}

// RecvCreate2 function as declared in include/Processing.NDI.deprecated.h:145
func RecvCreate2(pCreateSettings *RecvCreateType) RecvInstanceType {
	cpCreateSettings, cpCreateSettingsAllocMap := pCreateSettings.PassRef()
	__ret := C.NDIlib_recv_create2(cpCreateSettings)
	runtime.KeepAlive(cpCreateSettingsAllocMap)
	__v := *(*RecvInstanceType)(unsafe.Pointer(&__ret))
	return __v
}

// RecvCreate function as declared in include/Processing.NDI.deprecated.h:152
func RecvCreate(pCreateSettings *RecvCreateType) RecvInstanceType {
	cpCreateSettings, cpCreateSettingsAllocMap := pCreateSettings.PassRef()
	__ret := C.NDIlib_recv_create(cpCreateSettings)
	runtime.KeepAlive(cpCreateSettingsAllocMap)
	__v := *(*RecvInstanceType)(unsafe.Pointer(&__ret))
	return __v
}

// RecvCapture function as declared in include/Processing.NDI.deprecated.h:161
func RecvCapture(pInstance RecvInstanceType, pVideoData *VideoFrameType, pAudioData *AudioFrameType, pMetadata *MetadataFrameType, timeoutInMs uint32) FrameType {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpVideoData, cpVideoDataAllocMap := pVideoData.PassRef()
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	cpMetadata, cpMetadataAllocMap := pMetadata.PassRef()
	ctimeoutInMs, ctimeoutInMsAllocMap := (C.uint32_t)(timeoutInMs), cgoAllocsUnknown
	__ret := C.NDIlib_recv_capture(cpInstance, cpVideoData, cpAudioData, cpMetadata, ctimeoutInMs)
	runtime.KeepAlive(ctimeoutInMsAllocMap)
	runtime.KeepAlive(cpMetadataAllocMap)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpVideoDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (FrameType)(__ret)
	return __v
}

// RecvFreeVideo function as declared in include/Processing.NDI.deprecated.h:170
func RecvFreeVideo(pInstance RecvInstanceType, pVideoData *VideoFrameType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpVideoData, cpVideoDataAllocMap := pVideoData.PassRef()
	C.NDIlib_recv_free_video(cpInstance, cpVideoData)
	runtime.KeepAlive(cpVideoDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// RecvFreeAudio function as declared in include/Processing.NDI.deprecated.h:174
func RecvFreeAudio(pInstance RecvInstanceType, pAudioData *AudioFrameType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	C.NDIlib_recv_free_audio(cpInstance, cpAudioData)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// SendSendVideo function as declared in include/Processing.NDI.deprecated.h:178
func SendSendVideo(pInstance SendInstanceType, pVideoData *VideoFrameType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpVideoData, cpVideoDataAllocMap := pVideoData.PassRef()
	C.NDIlib_send_send_video(cpInstance, cpVideoData)
	runtime.KeepAlive(cpVideoDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// SendSendVideoAsync function as declared in include/Processing.NDI.deprecated.h:195
func SendSendVideoAsync(pInstance SendInstanceType, pVideoData *VideoFrameType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpVideoData, cpVideoDataAllocMap := pVideoData.PassRef()
	C.NDIlib_send_send_video_async(cpInstance, cpVideoData)
	runtime.KeepAlive(cpVideoDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// SendSendAudio function as declared in include/Processing.NDI.deprecated.h:199
func SendSendAudio(pInstance SendInstanceType, pAudioData *AudioFrameType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_send_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	C.NDIlib_send_send_audio(cpInstance, cpAudioData)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// UtilAudioToInterleaved16s function as declared in include/Processing.NDI.deprecated.h:204
func UtilAudioToInterleaved16s(pSrc *AudioFrameType, pDst *AudioFrameInterleaved16sType) {
	cpSrc, cpSrcAllocMap := pSrc.PassRef()
	cpDst, cpDstAllocMap := pDst.PassRef()
	C.NDIlib_util_audio_to_interleaved_16s(cpSrc, cpDst)
	runtime.KeepAlive(cpDstAllocMap)
	runtime.KeepAlive(cpSrcAllocMap)
}

// UtilAudioFromInterleaved16s function as declared in include/Processing.NDI.deprecated.h:209
func UtilAudioFromInterleaved16s(pSrc *AudioFrameInterleaved16sType, pDst *AudioFrameType) {
	cpSrc, cpSrcAllocMap := pSrc.PassRef()
	cpDst, cpDstAllocMap := pDst.PassRef()
	C.NDIlib_util_audio_from_interleaved_16s(cpSrc, cpDst)
	runtime.KeepAlive(cpDstAllocMap)
	runtime.KeepAlive(cpSrcAllocMap)
}

// UtilAudioToInterleaved32f function as declared in include/Processing.NDI.deprecated.h:214
func UtilAudioToInterleaved32f(pSrc *AudioFrameType, pDst *AudioFrameInterleaved32fType) {
	cpSrc, cpSrcAllocMap := pSrc.PassRef()
	cpDst, cpDstAllocMap := pDst.PassRef()
	C.NDIlib_util_audio_to_interleaved_32f(cpSrc, cpDst)
	runtime.KeepAlive(cpDstAllocMap)
	runtime.KeepAlive(cpSrcAllocMap)
}

// UtilAudioFromInterleaved32f function as declared in include/Processing.NDI.deprecated.h:219
func UtilAudioFromInterleaved32f(pSrc *AudioFrameInterleaved32fType, pDst *AudioFrameType) {
	cpSrc, cpSrcAllocMap := pSrc.PassRef()
	cpDst, cpDstAllocMap := pDst.PassRef()
	C.NDIlib_util_audio_from_interleaved_32f(cpSrc, cpDst)
	runtime.KeepAlive(cpDstAllocMap)
	runtime.KeepAlive(cpSrcAllocMap)
}

// FramesyncCreate function as declared in include/Processing.NDI.FrameSync.h:87
func FramesyncCreate(pReceiver RecvInstanceType) FramesyncInstanceType {
	cpReceiver, cpReceiverAllocMap := *(*C.NDIlib_recv_instance_t)(unsafe.Pointer(&pReceiver)), cgoAllocsUnknown
	__ret := C.NDIlib_framesync_create(cpReceiver)
	runtime.KeepAlive(cpReceiverAllocMap)
	__v := *(*FramesyncInstanceType)(unsafe.Pointer(&__ret))
	return __v
}

// FramesyncDestroy function as declared in include/Processing.NDI.FrameSync.h:91
func FramesyncDestroy(pInstance FramesyncInstanceType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_framesync_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	C.NDIlib_framesync_destroy(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// FramesyncCaptureAudio function as declared in include/Processing.NDI.FrameSync.h:110
func FramesyncCaptureAudio(pInstance FramesyncInstanceType, pAudioData *AudioFrameV2Type, sampleRate int32, noChannels int32, noSamples int32) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_framesync_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	csampleRate, csampleRateAllocMap := (C.int)(sampleRate), cgoAllocsUnknown
	cnoChannels, cnoChannelsAllocMap := (C.int)(noChannels), cgoAllocsUnknown
	cnoSamples, cnoSamplesAllocMap := (C.int)(noSamples), cgoAllocsUnknown
	C.NDIlib_framesync_capture_audio(cpInstance, cpAudioData, csampleRate, cnoChannels, cnoSamples)
	runtime.KeepAlive(cnoSamplesAllocMap)
	runtime.KeepAlive(cnoChannelsAllocMap)
	runtime.KeepAlive(csampleRateAllocMap)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// FramesyncCaptureAudioV2 function as declared in include/Processing.NDI.FrameSync.h:117
func FramesyncCaptureAudioV2(pInstance FramesyncInstanceType, pAudioData *AudioFrameV3Type, sampleRate int32, noChannels int32, noSamples int32) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_framesync_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	csampleRate, csampleRateAllocMap := (C.int)(sampleRate), cgoAllocsUnknown
	cnoChannels, cnoChannelsAllocMap := (C.int)(noChannels), cgoAllocsUnknown
	cnoSamples, cnoSamplesAllocMap := (C.int)(noSamples), cgoAllocsUnknown
	C.NDIlib_framesync_capture_audio_v2(cpInstance, cpAudioData, csampleRate, cnoChannels, cnoSamples)
	runtime.KeepAlive(cnoSamplesAllocMap)
	runtime.KeepAlive(cnoChannelsAllocMap)
	runtime.KeepAlive(csampleRateAllocMap)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// FramesyncFreeAudio function as declared in include/Processing.NDI.FrameSync.h:126
func FramesyncFreeAudio(pInstance FramesyncInstanceType, pAudioData *AudioFrameV2Type) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_framesync_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	C.NDIlib_framesync_free_audio(cpInstance, cpAudioData)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// FramesyncFreeAudioV2 function as declared in include/Processing.NDI.FrameSync.h:131
func FramesyncFreeAudioV2(pInstance FramesyncInstanceType, pAudioData *AudioFrameV3Type) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_framesync_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpAudioData, cpAudioDataAllocMap := pAudioData.PassRef()
	C.NDIlib_framesync_free_audio_v2(cpInstance, cpAudioData)
	runtime.KeepAlive(cpAudioDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// FramesyncAudioQueueDepth function as declared in include/Processing.NDI.FrameSync.h:156
func FramesyncAudioQueueDepth(pInstance FramesyncInstanceType) int32 {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_framesync_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	__ret := C.NDIlib_framesync_audio_queue_depth(cpInstance)
	runtime.KeepAlive(cpInstanceAllocMap)
	__v := (int32)(__ret)
	return __v
}

// FramesyncCaptureVideo function as declared in include/Processing.NDI.FrameSync.h:170
func FramesyncCaptureVideo(pInstance FramesyncInstanceType, pVideoData *VideoFrameV2Type, fieldType FrameFormatType) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_framesync_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpVideoData, cpVideoDataAllocMap := pVideoData.PassRef()
	cfieldType, cfieldTypeAllocMap := (C.NDIlib_frame_format_type_e)(fieldType), cgoAllocsUnknown
	C.NDIlib_framesync_capture_video(cpInstance, cpVideoData, cfieldType)
	runtime.KeepAlive(cfieldTypeAllocMap)
	runtime.KeepAlive(cpVideoDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// FramesyncFreeVideo function as declared in include/Processing.NDI.FrameSync.h:180
func FramesyncFreeVideo(pInstance FramesyncInstanceType, pVideoData *VideoFrameV2Type) {
	cpInstance, cpInstanceAllocMap := *(*C.NDIlib_framesync_instance_t)(unsafe.Pointer(&pInstance)), cgoAllocsUnknown
	cpVideoData, cpVideoDataAllocMap := pVideoData.PassRef()
	C.NDIlib_framesync_free_video(cpInstance, cpVideoData)
	runtime.KeepAlive(cpVideoDataAllocMap)
	runtime.KeepAlive(cpInstanceAllocMap)
}

// V5Load function as declared in include/Processing.NDI.DynamicLoad.h:588
func V5Load() *V5 {
	__ret := C.NDIlib_v5_load()
	__v := NewV5Ref(unsafe.Pointer(__ret))
	return __v
}

// V45Load function as declared in include/Processing.NDI.DynamicLoad.h:591
func V45Load() *V45 {
	__ret := C.NDIlib_v4_5_load()
	__v := NewV45Ref(unsafe.Pointer(__ret))
	return __v
}

// V4Load function as declared in include/Processing.NDI.DynamicLoad.h:595
func V4Load() *V4 {
	__ret := C.NDIlib_v4_load()
	__v := NewV4Ref(unsafe.Pointer(__ret))
	return __v
}

// V3Load function as declared in include/Processing.NDI.DynamicLoad.h:599
func V3Load() *V3 {
	__ret := C.NDIlib_v3_load()
	__v := NewV3Ref(unsafe.Pointer(__ret))
	return __v
}

// V2Load function as declared in include/Processing.NDI.DynamicLoad.h:603
func V2Load() *V2 {
	__ret := C.NDIlib_v2_load()
	__v := NewV2Ref(unsafe.Pointer(__ret))
	return __v
}
